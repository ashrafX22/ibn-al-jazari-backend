generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id            Int          @id @default(autoincrement())
  email         String       @unique
  name          String
  password      String       @default("google") // hashed
  gender        Gender
  age           Int
  access_token  String
  refresh_token String
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Payment       Payment[]
  Enrollment    Enrollment[]
  // MeetingOnStudents MeetingOnStudents[]
}

model Teacher {
  id                Int         @id @default(autoincrement())
  name              String
  email             String      @unique
  password          String      @default("google") // hashed
  gender            Gender
  age               Int
  summary           String      @default("")
  access_token      String
  refresh_token     String
  proficiency_level Role        @default(SHEIKH)
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  Classroom         Classroom[]
  // MeetingOnTeachers MeetingOnTeachers[]

  TeachersPayment TeachersPayment[]
}

model Classroom {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  subject_id Int
  teacher_id Int
  start_time DateTime
  end_time   DateTime
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  Meeting    Meeting[]
  Enrollment Enrollment[]
  teacher    Teacher      @relation(fields: [teacher_id], references: [id])

  Payment Payment[]
}

model Enrollment {
  StudentId   Int
  classroomId Int
  timestamp   DateTime

  Student   Student   @relation(fields: [StudentId], references: [id])
  Classroom Classroom @relation(fields: [classroomId], references: [id])

  @@id([StudentId, classroomId])
}

model Subject {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  price      Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Meeting {
  id           Int       @id @default(autoincrement())
  classroom_id Int
  link         String
  start_time   DateTime
  // end_time   DateTime
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  class        Classroom @relation(fields: [classroom_id], references: [id])
  // MeetingOnStudents    MeetingOnStudents[]
  // MeetingOnTeachers MeetingOnTeachers[]
}

model Payment {
  id                       Int           @id @default(autoincrement())
  student_id               Int
  classroom_id             Int
  payment_gateway_order_id String
  amount                   Float
  status                   PaymentStatus
  timestamp                DateTime      @default(now())
  paymentMethod            PaymentMethod
  Student                  Student       @relation(fields: [student_id], references: [id])
  Classroom                Classroom     @relation(fields: [classroom_id], references: [id])
}

model TeachersPayment {
  id                       Int           @id @default(autoincrement())
  teacher_id               Int
  payment_gateway_order_id String
  amount                   Float
  status                   PaymentStatus
  timestamp                DateTime      @default(now())
  paymentMethod            PaymentMethod
  Teacher                  Teacher       @relation(fields: [teacher_id], references: [id])
}

// model ClassroomOnTeachers {
//   teacherId   String
//   classroomId Int
//
//   Teacher   Teacher   @relation(fields: [teacherId], references: [id])
//   Classroom Classroom @relation(fields: [classroomId], references: [id])
//
//   @@id([teacherId, classroomId])
// }

// model MeetingOnStudents {
//   StudentId    String
//   meetingId Int
//
//   Student    Student    @relation(fields: [StudentId], references: [id])
//   Meeting Meeting @relation(fields: [meetingId], references: [id])
//
//   @@id([StudentId, meetingId])
// }

// model MeetingOnTeachers {
//   teacherId String
//   meetingId Int
//
//   Teacher Teacher @relation(fields: [teacherId], references: [id])
//   Meeting Meeting @relation(fields: [meetingId], references: [id])
//
//   @@id([teacherId, meetingId])
// }

enum Gender {
  MALE
  FEMALE
}

enum Role {
  SHEIKH // TODO:find descriptive name
  EXPERT
  ADMIN
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BITCOIN
  MOBILE_WALLET
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
}
